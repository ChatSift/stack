version: '3.7'

services:
  postgres:
    build:
      context: ./build/postgresql
      dockerfile: ./Dockerfile
    environment:
      POSTGRES_USER: 'user'
      POSTGRES_PASSWORD: 'admin'
      POSTGRES_MULTIPLE_DATABASES: 'ama,modmail,automoderator,roles,social,website'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    ports:
      - 127.0.0.1:5432:5432
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U user']
      interval: 10s
      timeout: 5s

  pg-backup:
    image: kartoza/pg-backup:12.4
    environment:
      POSTGRES_USER: 'user'
      POSTGRES_PASS: 'admin'
      POSTGRES_PORT: '5432'
      POSTGRES_HOST: 'postgres'
      REMOVE_BEFORE: '30'
      STORAGE_BACKEND: 'S3'
      HOST_BASE: 's3.amazonaws.com'
      HOST_BUCKET: '%(bucket)s.s3.amazonaws.com'
      BUCKET: 'chatsift'
    env_file:
      - .env.pg_backup
    restart: on-failure
    depends_on:
      - postgres

  caddy:
    build:
      context: ./build/caddy
      dockerfile: ./Dockerfile
    env_file:
      - ./.env.root
    ports:
      - '80:80'
      - '443:443'

  rabbitmq:
    image: rabbitmq:3-management-alpine
    restart: unless-stopped
    expose:
      - '5672'
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', '-q', 'ping']
      interval: 60s
      timeout: 5s

  redis:
    image: redis:6-alpine
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli ping']
      interval: 10s
      timeout: 5s

  parseable:
    image: parseable/parseable:v0.4.0-debug
    restart: unless-stopped
    expose:
      - '8000'
    environment:
      P_FS_DIR: '/parseable/data'
      P_STAGING_DIR: '/parseable/staging'
      P_USERNAME: 'admin'
    env_file:
      - ./.env.parseable
    volumes:
      - parseable-data:/parseable/data
      - parseable-staging:/parseable/staging
    command: ['parseable', 'local-store']

  ghost:
    image: ghost:4-alpine
    restart: unless-stopped
    expose:
      - 2368
    environment:
      NODE_ENV: 'production'
      url: 'https://blog.automoderator.app'
      database__client: 'sqlite3'
      mail__transport: 'SMTP'
      mail__options__service: 'Mailgun'
    volumes:
      - ghost-data:/var/lib/ghost/content

  watchtower:
    image: containrrr/watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: [
      '--interval', '120',
      '--cleanup',
      '--include-restarting',
      '--include-stopped',
      'chatsift-social-bot-1', 'chatsift-social-api-1',

      'chatsift-automoderator-canary-discord-proxy-1', 'chatsift-automoderator-canary-gateway-1',
      'chatsift-automoderator-canary-interactions-1', 'chatsift-automoderator-canary-logging-1',
      'chatsift-automoderator-canary-task-runner-1'
    ]

volumes:
  postgres-data:
    name: chatsift-postgres-data
  redis-data:
    name: 'chatsift-redis-data'
  ghost-data:
    name: 'chatsift-ghost-data'
  parseable-data:
    name: 'chatsift-parseable-data'
  parseable-staging:
    name: 'chatsift-parseable-staging'
